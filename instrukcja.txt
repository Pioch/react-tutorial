1. Utworzenie projektu (używając Vite)
- npm create vite@latest
- podanie nazwy projektu
- wybranie frameworka
- wybranie języka (TypeScript)
- otworzenie folseru z utworzonym projektem
- npm install

2. Uruchomienie servera (dev mode)
- npm run dev

3. foldery/pliki.
- src/App.tsx -> główny plik projektu popipnany w index.html:   
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
- pliki TypeScript w React mają rozszerzenie .tsx
- w React funkcje w plikach tsx mogą zwracać tagi html (return <h1>Hello World</h1>;)
- By użyć pliku tsx trzeba go eksportować (export default nazwa_pliku;)
- komponenty tworzyć w folderze src

4. Uzywanie funkcji z plików tsx:
- import Message from "./Nazwa_Pliku";
- <Nazwa_Pliku></Nazwa_Pliku>

5. Instalowanie bibliotek
- npm install bootstrap
- w main.tsx zaimportowanie ich

6. Zwracanie kodu Html.
- class zamienić na className (<li className="list-group-item">An item</li>) 
- komponent nie może zwracać więcej niż jeden element
- View -> Command Palette -> wrap with Abbreviation-> nazwa elementu w jaki ma być zapakowany zaznaczony kod 
(import { Fragment } from "react/jsx-runtime"; i zapakować w Fragment nie div) lub <> bez importowania
- By wyświetlić tablice w elementach html należy je zmapować:  {items.map((item) => (<li key={item} className="list-group-item">{item}</li>))}
- Każdy element html powinien mieć unikalny key
- warunek przy zwracaniu: { items.length == 0 ? <p>Brak</p> : null} lub {items.length == 0 && <p>Brak</p>}
- zdarzenia: {items.map((item, index) => (<li key={item} className="list-group-item" onClick={(event) => {console.log(item, index)}}>{item}</li>))}

Biblioteka do zdarzeń:
- import { MouseEvent } from "react";
- np. :
  const handlerClick = (event: MouseEvent) => {
    console.log(event);
  }

  {items.map((item, index) => (<li key={item} className="list-group-item" onClick={handleClick}>{item}</li>))}

  warunki przy klasach html:
  - {items.map((item, index) => (<li key={item} className={ selectedIndex === index ? 'list-group-item active' : 'list-group-item' } onClick={handleClick}>{item}</li>))}

  Hooks -> dla zmieniających się obiektów
  import { useState } from "react";

  const [selectedIndex, setSelectedIndex] = useState(-1); //[index, funkcja aktualizująca]
  {items.map((item, index) => (
    <li 
      key={item} 
      className={ selectedIndex === index ? 'list-group-item active' : 'list-group-item' } 
      onClick={() => { setSelectedIndex(index); }}>
      {item}
    </li>
  ))}

7. Przesyłanie danych do komponentów (Interfaces)

interface Props {
  items: string[];
  heading: string;
}

function ListGroup({ items, heading }: Props) {
    return (
    <>
      <h1>{heading}</h1>
      {/*getMessage()*/}
      {items.length == 0 && <p>Brak</p>}
      <ul className="list-group">
        {items.map((item, index) => (
          <li 
            key={item} 
            className={ selectedIndex === index ? 'list-group-item active' : 'list-group-item' } 
            onClick={() => { setSelectedIndex(index); }}>
            {item}
          </li>
        ))}
      </ul>
    </>
  );
}

w App.tsx trzeba parametry dodać
function App() {
  let items = [
    'Kot', 'Pies', 'Kaczka', 'Krowa', 'Kurczak'
  ];

  return <div><ListGroup items={items} heading="Zwierzęta"></ListGroup></div>;
}

8. Dodawanie funkcji do interface
interface Props {
  items: string[];
  heading: string;
  onSelectItem: (item: string) => void; //funkcja
}

funkcję należy dopisać w parametrach funkcji komponentu: function ListGroup({ items, heading, onSelectItem }: Props
W App.tsx dopisać funkcję przy zwracaniu komponentu: 

const handleSelectItem = (item: string) => {
    console.log(item);
}

return <div><ListGroup items={items} heading="Zwierzęta" onSelectItem={handleSelectItem}></ListGroup></div>;

9. Stany i argumenty.
Argumenty (props): dane wejściowe przekazywane do komponentów (podobne do argumentów funkcji), są niezmienne 
Stany (state): dane zarządzane przez komponent (podobne do lokalnych zmiennych), są zmienne 

10. Przekazywanie dzieci do komponentów (przekazywanie html).
Przy tworzeniu komponentów (po zainstalowaniu extensiona ES7 + /React-Native snippets)
wpisanie w pliku: rafce -> tworzy strukture komponentu

import { ReactNode } from "react";

interface Props {
  children: ReactNode; -> typ zmiennej, która jest znacznikiem html
} 

w App.tsx:
  <Alert>
    <p>Jakiś teskt</p> -> children
  </Alert>

11. React dev tools do Chrome.
W konsoli będzie dodatkowo do wyboru Components i Profiler
Components -> wyświetla drzewo komponentów wraz z ich parametrami

12. Opcjonalna wartość i definiowanie możliwych wartości
interface Props {
  children: string;
  color?: 'primary' | 'secondary' | 'success'; -> jak nie jest przekazana do komponentu lub w App to bierze domyślną, jak jest wpisana inna niż zdefiniowana to wyświetla błąd
  onClickItem: (nazwa: string) => void;
}

13. Stan początkowy i aktualny komponentu.
W App.tsx:

import { useState } from "react";
const [alertVisible, setAlertVisibility] = useState(false); <- stan początkowy false
- alertVisible <- aktualny stan
- setAlertVisibility <- funkcja do zmiany stanu

